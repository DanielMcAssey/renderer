#!/bin/bash

download () {
	echo "$(date) fetching next db file" >> log.txt
	if [ -e merge.osm ]; then rm merge.osm; fi
	while [ ! -e merge.osm ]; do
		cat types.txt | while read type; do
			touch sort.osm
			while [ -e sort.osm ]; do
				if [ "$type" = "sport=swimming" ]; then
					while ! wget -q -T 1800 -O xapi.osm --limit-rate=500k --post-file=swimming.osm3s http://overpass.osm.rambler.ru/cgi/interpreter; do
						echo "$(date) wget error - retrying JXAPI" >> log.txt
						sleep 60
					done
				else
					while ! wget -q -T 1800 --limit-rate=500k -O xapi.osm http://overpass.osm.rambler.ru/cgi/xapi?*[$type][@meta]; do
						echo "$(date) wget error - retrying JXAPI" >> log.txt
						sleep 60
					done
				fi
				if osmosis -q --rx file=xapi.osm --s --wx file=sort.osm 2> /dev/null; then
					rm xapi.osm
					if [ -e merge.osm ]; then
						osmosis -q --rx file=merge.osm --rx file=sort.osm --m --wx file=tmp.osm 2> /dev/null
						mv tmp.osm merge.osm
						rm sort.osm
					else
						mv sort.osm merge.osm
					fi
				else
					echo "$(date) bad data" >> log.txt
					touch sort.osm
				fi
			done
		done
	done
	mv merge.osm next.osm
	echo "$(date) successful download" >> log.txt
}

search () {
  zoom[$1]=$(($1+1))
  x[$1]=$(($2*2))
  y[$1]=$(($3*2))
  z[$1]=$((2**${zoom[$1]}))
  for ((i[$1]=0; ${i[$1]}<2; i[$1]=${i[$1]}+1)); do
    for ((j[$1]=0; ${j[$1]}<2; j[$1]=${j[$1]}+1)); do
      os=$(echo "scale=8; ${z[$1]}/4096" | bc)
      tile=$(echo "scale=8; (${x[$1]}+${i[$1]}-$os)" | bc)
      tile=$(echo "scale=8; if ($tile < 0) $tile+${z[$1]} else $tile" | bc)
      minlon=$(echo "scale=8; (($tile/${z[$1]})*360)-180" | bc)
      tile=$(echo "scale=8; (${x[$1]}+${i[$1]}+1+$os)" | bc)
      tile=$(echo "scale=8; if ($tile >= ${z[$1]}) $tile-${z[$1]} else $tile" | bc)
      maxlon=$(echo "scale=8; (($tile/${z[$1]})*360)-180" | bc)
      tile=$(echo "scale=8; (${y[$1]}+${j[$1]}-$os)" | bc -l)
      tile=$(echo "scale=8; if ($tile < 0) 0 else $tile" | bc)
      yx=$(echo "scale=8; 4*a(1)*(1-((2*$tile)/${z[$1]}))" | bc -l)
      maxlat=$(echo "scale=8; ((a((e($yx)-(1/e($yx)))/2))*180)/(4*a(1))" | bc -l)
      tile=$(echo "scale=8; (${y[$1]}+${j[$1]}+1+$os)" | bc -l)
      tile=$(echo "scale=8; if ($tile >= ${z[$1]}) ${z[$1]}-1 else $tile" | bc)
      yx=$(echo "scale=8; 4*a(1)*(1-((2*$tile)/${z[$1]}))" | bc -l)
      minlat=$(echo "scale=8; ((a((e($yx)-(1/e($yx)))/2))*180)/(4*a(1))" | bc -l)
			if [ $minlat = 0 ]; then minlat=-85.0; fi
      osmosis -q --rx file=tmp/panel-z$1.osm --bb top=$maxlat left=$minlon bottom=$minlat right=$maxlon completeWays=yes --wx file=tmp/panel-z${zoom[$1]}.osm
      timestamp=$(../util/checkdate tmp/panel-z${zoom[$1]}.osm)
      bb="$minlat,$minlon,$maxlat,$maxlon"
      tx=$((${x[$1]}+${i[$1]}))
      ty=$((${y[$1]}+${j[$1]}))
      if [ $timestamp \> $previous ]; then
        if [ ${zoom[$1]} -lt 12 ]; then
          if [ ${zoom[$1]} -eq 9 ]; then
            bb9=$bb; tx9=$tx; ty9=$ty
          fi
          if [ ${zoom[$1]} -eq 10 ]; then
            bb10=$bb; tx10=$tx; ty10=$ty
          fi
          if [ ${zoom[$1]} -eq 11 ]; then
            bb11=$bb; tx11=$tx; ty11=$ty
          fi
          search ${zoom[$1]} $tx $ty
        else
          perl ./orp/orp.pl -r ./styles/osm-seamark-sport-z12-15.xml -b $bb -o tmp/panel.svg tmp/panel-z12.osm 2>/dev/null
          inkscape tmp/panel.svg -e tmp/panel.png -d 90 -a 256:256:512:512 -y 0 -b "#000000" 1>/dev/null 2>/dev/null
          if [ -e tmp/panel.png ]; then
            if [ $(stat tmp/panel.png | cut -f 8 -d' ') -ge 410 ]; then
              if [ ! -e tmp/sport_tiles-9-$tx9-$ty9.png ]; then
                perl ./orp/orp.pl -r ./styles/osm-seamark-sport-z9.xml -b $bb9 -o tmp/panel.svg tmp/panel-z9.osm 2>/dev/null
                inkscape tmp/panel.svg -e tmp/sport_tiles-9-$tx9-$ty9.png -d 11.25 -a 256:256:2304:2304 -y 0 -b "#000000" 1>/dev/null 2>/dev/null
              fi
              if [ ! -e tmp/sport_tiles-10-$tx10-$ty10.png ]; then
                perl ./orp/orp.pl -r ./styles/osm-seamark-sport-z10.xml -b $bb10 -o tmp/panel.svg tmp/panel-z10.osm 2>/dev/null
                inkscape tmp/panel.svg -e tmp/sport_tiles-10-$tx10-$ty10.png -d 22.5 -a 256:256:1280:1280 -y 0 -b "#000000" 1>/dev/null 2>/dev/null
              fi
              if [ ! -e tmp/sport_tiles-11-$tx11-$ty11.png ]; then
                perl ./orp/orp.pl -r ./styles/osm-seamark-sport-z11.xml -b $bb11 -o tmp/panel.svg tmp/panel-z11.osm 2>/dev/null
                inkscape tmp/panel.svg -e tmp/sport_tiles-11-$tx11-$ty11.png -d 45 -a 256:256:768:768 -y 0 -b "#000000" 1>/dev/null 2>/dev/null
              fi                                                                                                          
              cp tmp/panel-z12.osm tmp/$tx\_$ty\_$bb\_12.osm
            fi
          fi
        fi
      fi
    done
  done
}

if [ $# -eq 0 ]; then
	if [ -e datestamp ]; then
		previous=$(cat datestamp)
	else
		previous=0000-00-00T00:00:00Z
	fi
elif [ $# -eq 1 ]; then
	previous=$1
else
	previous=0000-00-00T00:00:00Z
fi

if [ $# -eq 3 ]; then
	cp tmp/panel-z0.osm tmp/panel-z$1.osm
	search $1 $2 $3
	echo "$(date) Rendering of $1 $2 $3 complete" >> log.txt
	exit
fi

while true; do
	if [ ! -e next.osm ]; then
		download
	fi
	cp next.osm world.osm
	mv next.osm tmp/panel-z0.osm
	search 0 0 0
	latest=$previous
	timestamp=$(../util/checkdate world.osm)
	if [ $timestamp \> $latest ]; then
		latest=$timestamp;
	fi;
	echo "$latest" > datestamp
	echo "$(date) Rendering queued to latest timestamp: $latest" >> log.txt
	if [ -e stop ]; then
		echo "$(date) Stopped" >> log.txt
		exit
	fi
	if [ -e pause ]; then
		echo "$(date) Paused" >> log.txt
		while [ -e pause ]; do
			sleep 300
		done
		echo "$(date) Resumed" >> log.txt
	fi
		latest=$(cat datestamp)
	if [ $previous == $latest ]; then
		sleep 14400
	fi
	previous=$latest
done
