#!/bin/bash

search () {
  zoom[$1]=$(($1+1))
  x[$1]=$(($2*2))
  y[$1]=$(($3*2))
  z[$1]=$((2**${zoom[$1]}))
  for ((i[$1]=0; ${i[$1]}<2; i[$1]=${i[$1]}+1)); do
    for ((j[$1]=0; ${j[$1]}<2; j[$1]=${j[$1]}+1)); do
      os=$(echo "scale=10; ${z[$1]}/4096" | bc)
      tile=$(echo "scale=10; (${x[$1]}+${i[$1]}-$os)" | bc)
      tile=$(echo "scale=10; if ($tile < 0) $tile+${z[$1]} else $tile" | bc)
      minlon=$(echo "scale=10; (($tile/${z[$1]})*360)-180" | bc)
      tile=$(echo "scale=10; (${x[$1]}+${i[$1]}+1+$os)" | bc)
      tile=$(echo "scale=10; if ($tile >= ${z[$1]}) $tile-${z[$1]} else $tile" | bc)
      maxlon=$(echo "scale=10; (($tile/${z[$1]})*360)-180" | bc)
      tile=$(echo "scale=10; (${y[$1]}+${j[$1]}-$os)" | bc -l)
      tile=$(echo "scale=10; if ($tile < 0) 0 else $tile" | bc)
      yx=$(echo "scale=10; 4*a(1)*(1-((2*$tile)/${z[$1]}))" | bc -l)
      maxlat=$(echo "scale=10; ((a((e($yx)-(1/e($yx)))/2))*180)/(4*a(1))" | bc -l)
      tile=$(echo "scale=10; (${y[$1]}+${j[$1]}+1+$os)" | bc -l)
      tile=$(echo "scale=10; if ($tile >= ${z[$1]}) ${z[$1]}-1 else $tile" | bc)
      yx=$(echo "scale=10; 4*a(1)*(1-((2*$tile)/${z[$1]}))" | bc -l)
      minlat=$(echo "scale=10; ((a((e($yx)-(1/e($yx)))/2))*180)/(4*a(1))" | bc -l)
			if [ $minlat = 0 ]; then minlat=-85.0; fi
      osmosis -q --rx file=tmp/panel-z$1.osm --bb top=$maxlat left=$minlon bottom=$minlat right=$maxlon completeWays=yes --wx file=tmp/panel-z${zoom[$1]}.osm 2> /dev/null
      timestamp=$(../util/checkdate tmp/panel-z${zoom[$1]}.osm)
      bb="$minlat,$minlon,$maxlat,$maxlon"
      tx=$((${x[$1]}+${i[$1]}))
      ty=$((${y[$1]}+${j[$1]}))
      if [ $timestamp \> $previous ]; then
        if [ ${zoom[$1]} -lt 12 ]; then
	        if [ ${zoom[$1]} -eq 9 ]; then
	        	bb9=$bb; tx9=$tx; ty9=$ty
	        fi
	        if [ ${zoom[$1]} -eq 10 ]; then
	        	bb10=$bb; tx10=$tx; ty10=$ty
	        fi
	        if [ ${zoom[$1]} -eq 11 ]; then
	        	bb11=$bb; tx11=$tx; ty11=$ty
	        fi
          search ${zoom[$1]} $tx $ty
        else
          ../searender/searender ../searender/symbols/symbols.defs 19 $bb >tmp/panel.svg <tmp/panel-z12.osm
          inkscape tmp/panel.svg -e tmp/panel.png -d 90 -a 256:256:512:512 -y 0 -b "#000000" 1>/dev/null 2>/dev/null
          if [ -e tmp/panel.png ]; then
            if [ $(stat tmp/panel.png | cut -f 8 -d' ') -ge 410 ]; then
							if [ ! -e tmp/tiles-9-$tx9-$ty9.png ]; then
			          ../searender/searender ../searender/symbols/symbols.defs 9 $bb9 >tmp/panel.svg <tmp/panel-z9.osm
  	  		      inkscape tmp/panel.svg -e tmp/tiles-9-$tx9-$ty9.png -d 11.25 -a 256:256:2304:2304 -y 0 -b "#000000" 1>/dev/null 2>/dev/null
							fi
							if [ ! -e tmp/tiles-10-$tx10-$ty10.png ]; then
			          ../searender/searender ../searender/symbols/symbols.defs 10 $bb10 >tmp/panel.svg <tmp/panel-z10.osm
    			      inkscape tmp/panel.svg -e tmp/tiles-10-$tx10-$ty10.png -d 22.5 -a 256:256:1280:1280 -y 0 -b "#000000" 1>/dev/null 2>/dev/null
							fi
							if [ ! -e tmp/tiles-11-$tx11-$ty11.png ]; then
		    	      ../searender/searender ../searender/symbols/symbols.defs 11 $bb11 >tmp/panel.svg <tmp/panel-z11.osm
    		  	    inkscape tmp/panel.svg -e tmp/tiles-11-$tx11-$ty11.png -d 45 -a 256:256:768:768 -y 0 -b "#000000" 1>/dev/null 2>/dev/null
							fi
              cp tmp/panel-z12.osm tmp/$tx\_$ty\_$bb\_12.osm
            fi
          fi
        fi
      fi
    done
  done
}

rerender () {
  if [ -e rrx ]; then
    x=$(cat rrx)
  else
    x=0
  fi
  if [ -e rry ]; then
    y=$(cat rry)
  else
    y=0
  fi
  while true; do
    y=$(($y+1))
    if [ $y -eq 4096 ]; then
      x=$(($x+1))
      y=0
      if [ $x -eq 4096 ]; then
        x=0
      fi
    fi
    if [ -e tiles/12/$x/$y.png ]; then
      rr=1;
    else
      rr=0;
      for ((i=0; $i<2; i=$i+1)); do
        for ((j=0; $j<2; j=$j+1)); do
          tx=$(($x*2+$i))
          ty=$(($y*2+$j))
          if [ -e tiles/13/$tx/$ty.png ]; then
            rr=1
            break 2
          fi
        done
      done    
      if [ $rr -eq 0 ]; then
        for ((i=0; $i<4; i=$i+1)); do
          for ((j=0; $j<4; j=$j+1)); do
            tx=$(($x*4+$i))
            ty=$(($y*4+$j))
            if [ -e tiles/14/$tx/$ty.png ]; then
              rr=1
              break 2
            fi
          done
        done    
      fi
    fi
    tile=$(echo "scale=10; ($x-1)" | bc)
    tile=$(echo "scale=10; if ($tile < 0) $tile+4096 else $tile" | bc)
    minlon=$(echo "scale=10; (($tile/4096)*360)-180" | bc)
    tile=$(echo "scale=10; ($x+2)" | bc)
    tile=$(echo "scale=10; if ($tile >= 4096) $tile-4096 else $tile" | bc)
    maxlon=$(echo "scale=10; (($tile/4096)*360)-180" | bc)
    tile=$(echo "scale=10; ($y-1)" | bc -l)
    tile=$(echo "scale=10; if ($tile < 0) 0 else $tile" | bc)
    yx=$(echo "scale=10; 4*a(1)*(1-((2*$tile)/4096))" | bc -l)
    maxlat=$(echo "scale=10; ((a((e($yx)-(1/e($yx)))/2))*180)/(4*a(1))" | bc -l)
    tile=$(echo "scale=10; ($y+2)" | bc -l)
    tile=$(echo "scale=10; if ($tile >= 4096) 4095 else $tile" | bc)
    yx=$(echo "scale=10; 4*a(1)*(1-((2*$tile)/4096))" | bc -l)
    minlat=$(echo "scale=10; ((a((e($yx)-(1/e($yx)))/2))*180)/(4*a(1))" | bc -l)
  	if [ $minlat = 0 ]; then minlat=-85.0; fi
    osmosis -q --rx file=tmp/panel-z0.osm --bb top=$maxlat left=$minlon bottom=$minlat right=$maxlon completeWays=yes --wx file=tmp/panel-rr.osm 2> /dev/null
    if [ $(grep -c seamark tmp/panel-rr.osm) -ne 0 ]; then
      rr=1
    fi
    echo "$x" > rrx
    echo "$y" > rry
    if [ $rr -ne 0 ]; then
      bb="$minlat,$minlon,$maxlat,$maxlon"
      cp tmp/panel-rr.osm tmp/$x\_$y\_$bb\_12.osm
      break
    fi
    if [ -e next.osm ]; then
      break
    fi
  done
}

if [ $# -eq 0 ]; then
	if [ -e datestamp ]; then
		previous=$(cat datestamp)
	else
		previous=0000-00-00T00:00:00Z
	fi
elif [ $# -eq 1 ]; then
	previous=$1
else
	previous=0000-00-00T00:00:00Z
fi

if [ $# -eq 3 ]; then
	cp tmp/panel-z0.osm tmp/panel-z$1.osm
	search $1 $2 $3
	echo "$(date) Rendering of $1 $2 $3 complete" >> log.txt
	exit
fi

while true; do
	while [ ! -e next.osm ]; do
#    rerender
    sleep 30
	done
	echo "$(date) Parse world data" >> log.txt
	cp next.osm world.osm
	mv next.osm tmp/panel-z0.osm
	search 0 0 0
	latest=$previous
	timestamp=$(../util/checkdate world.osm)
	if [ $timestamp \> $latest ]; then
		latest=$timestamp;
	fi;
	echo "$latest" > datestamp
	echo "$(date) Rendering queued to latest timestamp: $latest" >> log.txt
	if [ -e stop ]; then
		echo "$(date) Stopped" >> log.txt
		exit
	fi
	if [ -e pause ]; then
		echo "$(date) Paused" >> log.txt
		while [ -e pause ]; do
			sleep 300
		done
		echo "$(date) Resumed" >> log.txt
	fi
		latest=$(cat datestamp)
#	if [ $previous == $latest ]; then
#		sleep 900
#	fi
	previous=$latest
done
