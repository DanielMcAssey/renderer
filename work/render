#!/bin/bash

download () {
	echo "$(date) fetching next db file" >> log.txt
	if [ -e merge.osm ]; then rm merge.osm; fi
	while [ ! -e merge.osm ]; do
		cat types.txt | while read type; do
			touch sort.osm
			while [ -e sort.osm ]; do
					while ! wget -q -T 60 --limit-rate=500k -O xapi.osm http://jxapi.openstreetmap.org/xapi/api/0.6/*[seamark:type=$type]; do
					echo "$(date) wget error - retrying JXAPI" >> log.txt
					sleep 60
				done
				if osmosis -q --rx file=xapi.osm --s --wx file=sort.osm 2> /dev/null; then
					rm xapi.osm
					if [ -e merge.osm ]; then
						osmosis -q --rx file=merge.osm --rx file=sort.osm --m --wx file=tmp.osm 2> /dev/null
						mv tmp.osm merge.osm
						rm sort.osm
					else
						mv sort.osm merge.osm
					fi
				else
					echo "$(date) bad data" >> log.txt
					touch sort.osm
				fi
			done
		done
	done
	../smfilter/smfilter -a 0.01 < merge.osm > next.osm
	rm merge.osm
	echo "$(date) successful download" >> log.txt
}

clean () {
	zoom[$1]=$(($1+1))
	x[$1]=$(($2*2))
	y[$1]=$(($3*2))
	for ((i[$1]=0; ${i[$1]}<2; i[$1]=${i[$1]}+1)); do
		for ((j[$1]=0; ${j[$1]}<2; j[$1]=${j[$1]}+1)); do
			xc=$((${x[$1]}+${i[$1]}))
			yc=$((${y[$1]}+${j[$1]}))
			cleanname="tiles/${zoom[$1]}/$xc/$yc.png"
			if [ -e $cleanname ]; then
				rm $cleanname
				echo "rm $cleanname" >> deletions
			fi
			if [ ${zoom[$1]} -lt 18 ]; then
				clean ${zoom[$1]} $xc $yc
			fi
		done
	done
}

tile () {
	filename="tiles/12/$1/$2.png"
	if [ -e $filename ]; then
		echo "rm $filename" >> deletions
	fi
	clean 12 $1 $2
	perl ../orp/orp.pl -r ../SeaMapStyles/osm-seamark-z12-15.xml -b $3 -o panel.svg panel-z12.osm 2>/dev/null
	inkscape panel.svg -e panel.png -d 90 -a 256:256:512:512 -y 0 -b "#000000" 1>/dev/null 2>/dev/null
	if [ $(stat panel.png | cut -f 8 -d' ') -ge 410 ]; then
		while [ $(ps -a | grep -c subtile) -gt 1 ]; do
			sleep 1
		done
		for k in {12..18}; do
			perl ../orp/orp.pl -r ../SeaMapStyles/osm-seamark-z$k.xml -b $3 -o panel_$k.svg panel-z12.osm 2>/dev/null &
		done;
		while [ $(ps -a | grep -c perl) -gt 1 ]; do
			sleep 1
		done
		mkdir -p tiles/12/$1
		inkscape panel_12.svg -e $filename -d 90 -a 256:256:512:512 -y 0 -b "#000000" 1>/dev/null 2>/dev/null
		if [ $(stat "$filename" | cut -f 8 -d' ') -lt 410 ]; then
			rm $filename
		else
			echo "put $filename cache/$(echo $filename | sed -e s?/?-?g)" >> tile.send
		fi
		./subtile 12 $1 $2 256 512 &
	fi
}

search () {
#echo $1 $2 $3
	zoom[$1]=$(($1+1))
	x[$1]=$(($2*2))
	y[$1]=$(($3*2))
	z[$1]=$((2**${zoom[$1]}))
	for ((i[$1]=0; ${i[$1]}<2; i[$1]=${i[$1]}+1)); do
		for ((j[$1]=0; ${j[$1]}<2; j[$1]=${j[$1]}+1)); do
			os=$(echo "scale=8; ${z[$1]}/4096" | bc)
			tile=$(echo "scale=8; (${x[$1]}+${i[$1]}-$os)" | bc)
			tile=$(echo "scale=8; if ($tile < 0) $tile+${z[$1]} else $tile" | bc)
			minlon=$(echo "scale=8; (($tile/${z[$1]})*360)-180" | bc)
			tile=$(echo "scale=8; (${x[$1]}+${i[$1]}+1+$os)" | bc)
			tile=$(echo "scale=8; if ($tile >= ${z[$1]}) $tile-${z[$1]} else $tile" | bc)
			maxlon=$(echo "scale=8; (($tile/${z[$1]})*360)-180" | bc)
			tile=$(echo "scale=8; (${y[$1]}+${j[$1]}-$os)" | bc -l)
			tile=$(echo "scale=8; if ($tile < 0) 0 else $tile" | bc)
			yx=$(echo "scale=8; 4*a(1)*(1-((2*$tile)/${z[$1]}))" | bc -l)
			maxlat=$(echo "scale=8; ((a((e($yx)-(1/e($yx)))/2))*180)/(4*a(1))" | bc -l)
			tile=$(echo "scale=8; (${y[$1]}+${j[$1]}+1+$os)" | bc -l)
			tile=$(echo "scale=8; if ($tile >= ${z[$1]}) ${z[$1]}-1 else $tile" | bc)
			yx=$(echo "scale=8; 4*a(1)*(1-((2*$tile)/${z[$1]}))" | bc -l)
			minlat=$(echo "scale=8; ((a((e($yx)-(1/e($yx)))/2))*180)/(4*a(1))" | bc -l)
			bb="$minlon,$minlat,$maxlon,$maxlat"
			osmosis -q --rx file=panel-z$1.osm --bb top=$maxlat left=$minlon bottom=$minlat right=$maxlon completeWays=yes --wx file=panel-z${zoom[$1]}.osm
			timestamp=$(../util/checkdate panel-z$1.osm)
			if [ $timestamp \> $previous ]; then
				if [ ${zoom[$1]} -lt 12 ]; then
					search ${zoom[$1]} $((${x[$1]}+${i[$1]})) $((${y[$1]}+${j[$1]}))
				else
					tile $((${x[$1]}+${i[$1]})) $((${y[$1]}+${j[$1]})) $minlat,$minlon,$maxlat,$maxlon
				fi
			fi
		done
	done
}

if [ $# -eq 0 ]; then
	if [ -e datestamp ]; then
		previous=$(cat datestamp)
	else
		previous=0
	fi
elif [ $# -eq 1 ]; then
	previous=$1
else
	previous=0
fi

if [ $# -eq 3 ]; then
	cp world.osm panel-z$1.osm
	search $1 $2 $3
	echo "$(date) Rendering of $1 $2 $3 complete" >> log.txt
	exit
fi

while true; do
	if [ ! -e next.osm ]; then
		download
	fi
	mv next.osm world.osm
	cp world.osm panel-z0.osm
	search 0 0 0
	latest=$previous
	timestamp=$(../util/checkdate world.osm)
	if [ $timestamp \> $latest ]; then
		latest=$timestamp;
	fi;
	echo "$latest" > datestamp
	echo "$(date) Rendered to latest timestamp: $latest" >> log.txt
	if [ -e stop ]; then
		echo "$(date) Stopped" >> log.txt
		exit
	fi
	if [ -e pause ]; then
		echo "$(date) Paused" >> log.txt
		while [ -e pause ]; do
			sleep 300
		done
		echo "$(date) Resumed" >> log.txt
	fi
		latest=$(cat datestamp)
	if [ $previous == $latest ]; then
		sleep 3600
	fi
	previous=$latest
done
